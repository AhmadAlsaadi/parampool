TITLE: Parampool Tutorial
AUTHOR: Hans Petter Langtangen at Center for Biomedical Computing, Simula Research Laboratory and Department of Informatics, University of Oslo
AUTHOR: Anders Johansen at Center for Biomedical Computing, Simula Research Laboratory
DATE: today

__Summary.__
Parampool is a Python package for defining and automatically
generating web interfaces for scientific applications. The simplest
use is to pass a Python function to Parampool and get a web interface
for setting the arguments to the function. More powerful use consists
in defining an input *menu*, which is a tree structure of parameters,
where each parameter is associated with a name, default value, help
text, widget type, validation information, etc. A user interface can
then be automatically generated. The currently supported user
interfaces are the command line, files, and web pages.

======= Application =======

We shall work with a sample application concerning the simulation of
a ball thrown through air. Given the initial velocity of the ball,
and some other data like mass and radius, we want to compute
the trajectory of the ball until it hits the ground. The details of
the calculations are not of interest here as our focus is on software
for assigning input data and for displaying the results. However,
the interested reader can consult the box below for the inner workings
of the simulations.

#The various features of Parampool will be introduced in a series
#of examples where the complexity of input and the results ranges
#from very simple to quite advanced.

!bnotice Mathematical model

!bt
\begin{equation}
m\frac{d^2}{\bm{r}}{dt^2} = -m\bm{g} - \frac{1}{2}C_D\varrho A v^2\bm{i}_t
+ \frac{1}{2}C_L\varrho A v^2\bm{i}_n + \frac{1}{2}C_S\varrho A v^2(\bm{i}_t
\times \bm{i}_n),
label{pp:ballistic:eq1}
\end{equation}
!et
where $m$ is the mass of the body, $\bm{g}$ is the acceleration of
gravity vector, $C_D$ is a drag coefficient, $\varrho$ is the density
of air, $A$ is the cross-section area of the body perpendicular to the motion,
$v = |\bm{v}-\bm{w}|$ is the relative velocity between the body,
$\bm{v}=d\bm{r}/dt$, and a given wind velocity $\bm{w}$, $C_L$
is a lift coefficient, $C_S$ is a coefficient for the sidewind or lateral
aerodynamic force, $\bm{i}_t$
is a unit tangent vector of the body's path, while $\bm{i}_n$ is a unit
vector normal to the path tilting upwards.

We can simplify the equation for a two-dimensional motion in an $xy$ plane
with unit vectors $\bm{i}$ and $\bm{j}$ in the $x$ and $y$ directions,
respectively.
Then we skip the sidewind force (set $C_S=0$). We also let gravity
point downwards, $\bm{g}=-g\bm{j}$, and let the wind velocity be horizontal:
$\bm{w}=w\bm{i}$. Furthermore,

!bt
\begin{align}
\bm{i}_t &= \frac{\bm{v}}{\left|\bm{v}\right|} \equiv (a,b),\quad \bm{v}
= \frac{d\bm{r}}{dt},
\bm{i}_n &= (-b, a)\hbox{ if }a>0\hbox{ else }(b,-a)
\end{align}
!et
!enotice


======= User interfaces for functions =======

Parampool can automatically generate user interfaces to a given
function. This functionality will be explained through several examples
of increasing complexity, using the trajectory of a ball as explained
above as application.

===== Real numbers as input and output =====

Suppose you have some function

!bc pycod
def compute_drag_free_landing(initial_velocity, initial_angle):
    ...
    return landing_point
!ec
This function returns the landing point on
the ground (`landing_point`) of a ball that is initially thrown with a
given velocity in magnitude (`initial_velocity`), making
an angle (`initial_angle`) with the ground. There are two real input
variables and one real output variable. The function is available
in a module `compute.py`.

=== Flask interface ===

Show plot.

=== Django interface ===

Next: return of HTML code with plot, put plot in static

Next: full app with m, R, spin, w, method, dt, two plots,
one with trajectory (in title) and one with the forces.
dt=None makes autocalc of dt based on T (T/500). Need to adjust so
that None means TextField - can auto handle this.

======= Working with a menu of input parameters =======

Parampool's main focus is on scientific applications with lots of
input data of different type, organized in a hierarchical tree fashion.

Use example with full drag, spin, wind, choice of numerical scheme, dt,
and get two plots back.

Three submenus:

 * Initial state: velocity and position (4 in a submenu)
 * Numerics (2 in a submenu, could extend if adaptive scheme with tolerance,
   have dt=None for sensible default value but that's not relevant if
   we work with rk45), have method as list of options)
 * Physics (w, spin, m and R in a submenu)

What about w(t) like a w_0 + sin?

Could have an exercise with a missile, rho depending on height (see sports
book) rho_sea*exp(-0001036y) fra De Mestre, C_D dep on v see
http://en.wikipedia.org/wiki/Drag_equation (no the relevant C_D is probably
beyond the drag crisis and no need for C_D(Re))

===== Extra =====

Can be exercises:
Use `solver` from `bumpy` as main function.

!bt
\begin{equation}
mu'' + f(u') + s(u) = F(t),
label{pp:model:eq1}
\end{equation}
!et

Make an interface to
it such that

   * s=k*u, have k as parameter, linear damping, F=0, V=0
   * F=A*sin(w*t), A and w are parameters
   * damping with two values and radio buttons, b
   * s is a text expression
   * F is a filename (0 is default)
   * there is a submenu for F with different models: filename,
     A*sin(w*t) (submenu), white noise with intensity, formula of t
   * another submenu for s models

On the main menu: damping can have radio buttons for linear b*u and
quadratic b*u**2, F has list of different type of forces
